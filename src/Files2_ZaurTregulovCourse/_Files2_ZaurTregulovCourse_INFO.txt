Stream - поток для работы с файоами, упорядоченная последовательность данных.

Файлы разделяются на:
    - читабельные (text files);
    - нечитабельные (binary files).
Для работы с ними используются разные типы стримов.

=== FileReader и FileWriter ===

    Используются для работы с текстовыми файлами.

    FileWriter writer = new FileWriter("file1.txt");
    FileReader reader = new FileReader("file1.txt");

    !!! Стримы нужно обязательно закрывать (reader.close() или try-with-resources)

=== BufferedReader и BufferedWriter ===

    Использование буферизации в стримах позволяет достичь
    большей эффективности при чтении файла или записи в него.

    BufferedWriter writer = new BufferedWriter(new FileWriter("file1.txt"));
    BufferedReader reader = new BufferedReader(new FileReader("file1.txt"));

=== FileInputStream и FileOutputStream ===

    Используются для работы с бинарными файлами.

    FileInputStream inputStream = new FileInputStream("test2.bin");
    FileOutputStream outputStream = new FileOutputStream("test2.bin");

    Также можно использовать BufferedInputStream и BufferedOutputStream.

=== DataInputStream и DataOutputStream ===

    Позволяют записывать в файл и читать из него примитивные типы данных.

    DataInputStream inputStream = new DataInputStream(new FileInputStream("test2.bin"));
    DataOutputStream outputStream = new DataOutputStream(new FileOutputStream("test2.bin"));

=== Serialization ===

    Сериализация - это процесс преобразования объекта в
    последовательность байт.
    Десериализация - процесс восстановления объекта из тих байт.

    ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream("test2.bin"));
    ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("test2.bin"));

    Все классы для сериализации должны быть Serializable.

    transient - ключевое слово для полей, которые не должны быть сериализованы.
    Нужно самому задавать static final long serialVersionUID.

=== RandomAccessFile ===

    Позволяет читать информацию из любого места файла и
    записывать информацию в любое место файла.

    RandomAccessFile file = new RandomAccessFile("file.txt", "rw");

    seek() - установить поинтер в нужную позицию.
    getFilePointer() - найти положение поинтера.

=== Класс File ===

    Класс File позволяет управлять информацией о файлах и директориях.

=== Channel и Buffer ===

    (Будем рассматривать FileChannel и ByteBuffer)

    Buffer - это блок памяти, в который мы можем записывать информацию,
        а также читать её. В отличие от стримов, Channel может как читать файл,
        так и записывать в него.

    Чтение из файла: Channel читает информацию из файла и
        записывает в Buffer.
    Запись в файл: Channel читает информацию из Buffer и
        записывает её в файл.

    У Buffer есть 3 понятия:
        capacity - размер буфера.
        position - позиция для записи или чтения.
        limit - сколько байт из буфера можно читать. Если буффер был
            заполнен не полность, limit не даст прочитать лишнего.

    flip() - меняет режим буффера из записи в чтение,
            position переходит на 0 ячейку.

    clear() - ставим position на 0 ячейку.

    wrap() - записывает информацию из в буффер. не нужно:
        вручную указывать размер буффера, записывать в буфер и делать флип,
        эти 3 вещи делает метод wrap().

    rewind() - перемещает позицию на ячейку 0.

    compact() - копирует непрочитанные байты в начало буффера,
        позиция указывает на пячейку после смещённых байт.

    mark() - ставит отметку на текущей ячейке.

    reset() - возвращается к отмеченной ячейке.

=== Интерфейс Path и класс Files ===

    Объект типа Path представляет собой путь к файлу или директории.

        Path path = Paths.get("file.txt");

    Files - утилитарный класс.