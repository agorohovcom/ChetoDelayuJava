=== Основные цели использования многопоточности: ===
    1. Производительность
    2. Concurrency

=== Варианты создания нового потока: ===

    1 вариант:
    // Создание
    class MyThread extends Thread{ public void run() { код }
    // Запуск
    new MyThread().start();

    2 вариант:
    // Создание
    class MyRunnableImpl implements Runnable{ public void run() { код }
    // Запуск
    new Thread(new MyRunnableImpl()).start();

Из-за отсутствия в Java множественного наследования,
чаще используется второй вариант.

Чтобы запустить новый поток, нужно использовать метод start().
Если вызвать метод run(), он просто выполнится в текущем потоке.

=== Ключевые слова: ===

volatile - используется для пометки переменной, как хранящейся
    только в основной памями "main memory".
    !!! Для синхронизации значения переменной между потоками ключевое
    слово volatile используется тогда, когда только один поток
    может изменять значение этой переменной, а остальные потоки
    могут его только читать.

=== Методы Thread: ===

// Если не задавать имя, будет стандартное типа "Thread-0"
setName()
getName()

// Приоритет от 1 до 10, стандартный 5
// Можно задать числами или вариантами:
// MIN_PRIORITY (1), MAX_PRIORITY (10), NORM_PRIORITY (5)
setPriority()
getPriority()

sleep(t) - ожидание потока, "усыпление" на t миллисекунд.
join() - поток, В котором вызывается join(), ждёт окончания вызывающего потока.
    Может принимать верхний порог ожидания в миллисекундах.

=== Concurrency / Parallelism ====
=== Asynchronous / Synchronous ===

    Concurrency - соглассованность, означает выполнение сразу нескольких задач,
         но не обязательно в одно и то же время.
         Это как мак многозадачность на 1-ядерном процессоре.
    Parallelism - параллелизм, это concurrency, но с одновременным выполнением задач.

    Asynchronous - в асинхронном программировании можно не дожидаться выполнения одной
        задачи и во время её выполнения переключиться на другую.
        Это позволяет достичь concurrency.
    Synchronous - в синхронном программировании все задачи выполняются
        последовательно, одна за одной.